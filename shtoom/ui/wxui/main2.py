from wxPython.wx import *
from wxshtoomframe2 import ShtoomMainFrame
from shtoom.ui.base import ShtoomBaseUI
from twisted.python import log
from prefs import PreferencesDialog

# Implements the ShtoomMainFrame class as generated by
# wxglade. Call me paranoid but I'm not sticking this code
# in a generated file - no matter how bug free and fantastic
# wxglade is at generating code.

# TODO: Hookup the DTMF code for the number buttons
# TODO: Hookup the log text widget thingy (or dump it cos its ugly). Maybe
#       have an error log which can be viewed in a seperate window

class ShtoomMainFrameImpl(ShtoomMainFrame, ShtoomBaseUI):
    MENU_PREFS = 101
    MENU_EXIT = 102
    MENU_HELP_CONTENTS = 103
    BUTT_ADVANCED = 201
    BUTT_REGISTER = 202
    BUTT_CALL = 203
    BUTT_HANGUP = 204

    def __init__(self, *args, **kwds):
        ShtoomMainFrame.__init__(self, *args, **kwds)
        EVT_MENU(self, self.MENU_EXIT, self.DoExit)
        EVT_MENU(self, self.MENU_PREFS, self.DoPreferences)
        EVT_BUTTON(self, self.BUTT_ADVANCED, self.OnAdvanced)
        EVT_BUTTON(self, self.BUTT_CALL, self.OnCall)
        EVT_BUTTON(self, self.BUTT_HANGUP, self.OnHangup)
        EVT_BUTTON(self, self.BUTT_REGISTER, self.OnRegister)
        self.advanced_mode = True
        self.button_hangup.Disable()

        # TODO: Setup combobox values from previous address history
        #[self.combo_address.Append(v) for v in self.address_history]

        # Initialise the status bar
        self.SetStatusText('Not connected')
        # Startup without the "advanced" functionality showing
        self.OnAdvanced(None)

    def statusMessage(self, message):
        self.SetStatusText(message)

    def debugMessage(self, message):
        log.msg(message)

    def errorMessage(self, message):
        log.msg("ERROR: %s"%message)

    def OnCall(self, event):
        sipURL = self.combo_address.GetValue()
        if not sipURL.startswith('sip'):
            dlg = wxMessageDialog(self, '%s is a invalid address. The address must begin with "sip".'%sipURL,
                "Address error", wxOK)
            dlg.ShowModal()
            return
        # have hang up and call buttons toggle
        self.button_call.Disable()
        deferred = self.app.placeCall(sipURL)
        deferred.addCallbacks(self.callConnected, self.callFailed).addErrback(log.err)

    def callStarted(self, cookie):
        self.cookie = cookie
        self.button_hangup.Enable(True)

    def callConnected(self, cookie):
        self.button_hangup.Enable(True)
        self.SetStatusText("Call connected")

    def callDisconnected(self, cookie, message=""):
        status = "Call disconnected"
        if message: 
            status = "%s: %r"%(status, message)
        self.SetStatusText(status)
        self.button_call.Enable(True)
        self.button_hangup.Disable()
        self.cookie = None

    def callFailed(self, cookie, message=""):
        status = "Call failed"
        if message: 
            status = "%s: %r"%(status, message)
        self.SetStatusText(status)
        self.button_call.Enable(True)
        self.button_hangup.Disable()
        self.cookie = None

    def OnHangup(self, event):
        self.app.dropCall(self.cookie)
        self.button_call.Enable(True)
        self.button_hangup.Disable()
        self.SetStatusText('Not connected')
        self.cookie = False

    def incomingCall(self, description, call, defresp):
        from shtoom.exception import CallRejected
        dlg = wxMessageDialog(self, 'Incoming Call: %s\nAnswer?'%description,
            "Shtoom Call", wxYES_NO|wxICON_QUESTION)
        accept = dlg.ShowModal()
        if accept == wxID_YES:
            self.cookie = call
            self.button_call.Disable()
            self.SetStatusText('Connected to %s'%description)
            defresp.callback('yes')
        else:
            defresp.errback(CallRejected)

    def OnRegister(self, event):
        self.app.register()

    def DoPreferences(self, event):
        dlg = PreferencesDialog(main=self, opts=self.app.getOptions())
        val = dlg.ShowModal()
        if val == wxID_OK:
            print "Saving..."
            dlg.savePreferences(self.app)

    def DoExit(self, event):
        self.Close(True)

    def UpdateHeight(self, newheight):
        curwidth, curheight = self.GetSize()
        #self.SetSizeHints(curwidth, newheight, -1, -1)
        self.SetSize((-1, newheight))
        self.Show(1)

    def OnAdvanced(self, event):
        # Hide the extended interface. Basically the last slot in the
        # frames sizer. Modifies the advanced button label. Fixes up window
        # sizes
        sizer = self.GetSizer()

        awidth,aheight = self.advanced.GetSize()
        fwidth,fheight = self.GetSize()

        if self.advanced_mode:
            self.advanced_mode = False
            self.advanced.Show(0)
            sizer.Show(self.advanced, 0)
            self.advheight = aheight
            newheight = fheight-aheight
            self.button_advanced.SetLabel('+')
        else:
            self.advanced_mode = 1
            self.advanced.Show(1)
            sizer.Show(self.advanced, 1)
            newheight = fheight+self.advheight
            self.button_advanced.SetLabel('-')
        #self.Layout()
        #sizer.Layout()
        sizer.Fit(self)
        #sizer.SetSizeHints(self)
        self.UpdateHeight(newheight)

